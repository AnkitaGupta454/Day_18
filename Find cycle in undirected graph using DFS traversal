#include <bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *adj;
    bool isCyclicUtil(int v,bool visited[],int parent);
    
    public:
    Graph(int V);
    bool isCyclic();
    int addEdge(int v,int u);
};

Graph:: Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

int Graph:: addEdge(int v,int u)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool Graph::isCyclicUtil(int v,bool visited[],int parent)
{
    visited[v]=true;
    list<int>:: iterator i;
    for (i =adj[v].begin(); i!=adj[v].end(); i++) 
    {
      if(!visited[*i])
      {
          if(isCyclicUtil(*i,visited,v))
          return true;
      }
      else if(*i!=parent)
      return true;
    }
    return false;
}

bool Graph::isCyclic()
{
    bool *visited=new bool[V];
    for (int i = 0; i <V ; i++) {
       visited[i]=false;
    }
    for (int i = 0; i <V ; i++){ 
    if(!visited[i])
    if(isCyclicUtil(i,visited,-1))
    return true;
    }
    return false;
}
int main()
{
    Graph g1(5);
    g1.addEdge(1,0);
    g1.addEdge(2,1);
    g1.addEdge(0,2);
    g1.addEdge(0,3);
    g1.addEdge(3,4);
    g1.isCyclic()?cout<<"Graph Contains cycle"<<endl:cout<<"Graph does not Contains cycle"<<endl;
    
    Graph g2(3); 
    g2.addEdge(0, 1); 
    g2.addEdge(1, 2); 
    g2.isCyclic()?  
       cout << "Graph contains cycle\n": 
       cout << "Graph doesn't contain cycle\n";
    return 0;
}


output:
Graph Contains cycle
Graph doesn't contain cycle
